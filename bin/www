#!/usr/bin/env node
"use strict";
/**
 * Module dependencies.
 */
var cluster = require("cluster");
var app = require("../app");
var debug = require("debug")("amarischool-api-node:server");
var http = require("http");

var numCPUs = require("os").cpus().length;
const clusterType = process.env.CLUSTER || "master";
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || process.env.APP_PORT || "3000");
var app_name = process.env.APP_NAME || "test app";
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

serverClustering(clusterType);

function serverClustering(clusterType) {
  if (clusterType === "master") {
    runFromMaster();
  } else if (clusterType === "worker") {
    runFromWorker();
  } else {
    throw new Error("Not supported yet");
  }
}

/**
 * runFromWorker to run server in Worker cluster.
 * cpu/2
 */
function runFromWorker() {
  if (cluster.isMaster) {
    var numberofworker = numCPUs / 2 || 0;
    if (numberofworker === 0) {
      throw new Error(
        "Please run into master. You have enough resources to run into worker"
      );
    }
    for (let i = 0; i < numberofworker; i++) {
      cluster.fork();
    }
    cluster.on("exit", (worker, code, signal) => {
      console.log(`worker ${worker.process.pid} died`);
      cluster.fork();
    });
  } else {
    createdServer();
    console.log(`Worker ${process.pid} started`);
  }
}

/**
 * runFromMaster to run server in Master cluster.
 */
function runFromMaster() {
  if (cluster.isMaster) {
    console.log(`Master ${process.pid} is running`);
    createdServer();
  }
}

/**
 * createdServer to create server listener.
 */
function createdServer() {
  server.listen(port, listenOnPort);
  server.on("error", onError);
  server.on("listening", onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function listenOnPort(val) {
  console.log(`${app_name} is listening on `, `http://localhost:${port}`);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
